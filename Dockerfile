# ---- Stage 1: Build Frontend ----
FROM node:24-bookworm AS frontend-builder
WORKDIR /app/frontend
ENV NODE_ENV=development

RUN echo "--- [FRONTEND] Stage 1: Starting Frontend Build ---"

RUN echo "--- [FRONTEND] Copying package files ---"
COPY frontend/package.json frontend/package-lock.json ./

RUN echo "--- [FRONTEND] Installing dependencies (npm ci) ---"
# If frontend had native dependencies, build tools would be needed here too.
# For a typical Vite/React/Vue app, this is often not the case.
RUN npm ci

RUN echo "--- [FRONTEND] Listing node_modules/.bin to check for vite and tsc ---"
RUN ls -l node_modules/.bin || echo "node_modules/.bin not found or empty"
RUN test -f node_modules/.bin/vite && echo "Vite CLI found" || echo "Vite CLI NOT FOUND"
RUN test -f node_modules/.bin/tsc && echo "TSC CLI found" || echo "TSC CLI NOT FOUND"

RUN echo "--- [FRONTEND] Copying rest of frontend source code ---"
COPY frontend/ ./

RUN echo "--- [FRONTEND] Running build script: npm run build (tsc -b && vite build) ---"
RUN npm run build
RUN echo "--- [FRONTEND] Listing frontend build output (dist directory) ---"
RUN ls -R dist || echo "Frontend dist directory not found"
RUN echo "--- [FRONTEND] Stage 1: Frontend Build Complete ---"


# ---- Stage 2: Build Backend ----
FROM node:24-bookworm AS backend-builder
WORKDIR /app/backend
ENV NODE_ENV=development

RUN echo "--- [BACKEND] Stage 2: Starting Backend Build ---"

# Install build tools needed for native modules (like sqlite3, better-sqlite3)
# python3, python3-dev, build-essential (for make, g++)
RUN echo "--- [BACKEND] Installing build tools ---"
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3 \
    python3-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

RUN echo "--- [BACKEND] Copying package files ---"
COPY backend/package.json backend/package-lock.json ./
# If you have a drizzle.config.js/ts, copy it too
COPY backend/drizzle.config.ts ./ 

RUN echo "--- [BACKEND] Installing dependencies (npm ci) ---"
RUN npm_config_loglevel=verbose npm ci --prefer-offline --no-audit # Keep verbose for now

RUN echo "--- [BACKEND] Listing node_modules/.bin to check for drizzle-kit ---"
RUN ls -l node_modules/.bin || echo "node_modules/.bin not found or empty"
RUN test -f node_modules/.bin/drizzle-kit && echo "Drizzle Kit CLI found" || echo "Drizzle Kit CLI NOT FOUND"

# --- Add Drizzle Kit Push Here ---
# First, copy the rest of your backend source code so drizzle-kit can find schemas etc.
# But, be careful about what you copy if schema files are outside the main `src`
# For simplicity, let's assume schema files are copied with the rest of the backend code.
RUN echo "--- [BACKEND] Copying rest of backend source code (before Drizzle push) ---"
COPY backend/ ./ 
# Ensure your DATABASE_URL environment variable is set if drizzle-kit push needs it at build time.
# You might need to pass it as a build argument:
# ARG DATABASE_URL_ARG
# ENV DATABASE_URL=$DATABASE_URL_ARG
RUN echo "--- [BACKEND] Running Drizzle Kit Push ---"
# Ensure DATABASE_URL is available or that drizzle-kit push doesn't strictly need it at build time
# if it's just generating SQL/migrations. If it tries to connect, it will fail unless DB is accessible.
# If DATABASE_URL is needed and comes from GitHub Secrets, it must be passed as a build arg.
RUN npx drizzle-kit push

# --- Drizzle Kit Push Done ---

# Remove build tools once dependencies are installed and compiled
# (and after drizzle-kit push if it doesn't need them, which it usually doesn't directly)
RUN echo "--- [BACKEND] Removing build tools ---"
RUN apt-get purge -y --auto-remove python3 python3-dev build-essential && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

RUN echo "--- [BACKEND] Listing node_modules/.bin to check for tsc ---"
RUN ls -l node_modules/.bin || echo "node_modules/.bin not found or empty"
RUN test -f node_modules/.bin/tsc && echo "TSC CLI found" || echo "TSC CLI NOT FOUND in backend"

# The `COPY backend/ ./` was moved up.
# If your `npm run build` relies on files generated by drizzle-kit, this order is correct.
RUN echo "--- [BACKEND] Running build script: npm run build (tsc) ---"
RUN npm run build

RUN echo "--- [BACKEND] Listing backend build output (dist directory) ---"
RUN ls -R dist || echo "Backend dist directory not found"
RUN echo "--- [BACKEND] Stage 2: Backend Build Complete ---"


# ---- Stage 3: Production Image ----
FROM node:24-bookworm
WORKDIR /app
ENV NODE_ENV=production

RUN echo "--- [PROD] Stage 3: Starting Production Image Setup ---"

# Create a non-root user and group (Debian-style)
RUN addgroup --system appgroup && adduser --system --ingroup appgroup appuser

# Copy package.json and package-lock.json for npm prune
COPY backend/package.json backend/package-lock.json ./

# Copy FULL node_modules from backend-builder
RUN echo "--- [PROD] Copying node_modules from backend-builder ---"
COPY --from=backend-builder --chown=appuser:appgroup /app/backend/node_modules ./node_modules

# Prune devDependencies from the copied node_modules
RUN echo "--- [PROD] Pruning devDependencies from node_modules ---"
RUN npm prune --production --prefer-offline --no-audit --progress=false

# Copy built backend from backend-builder stage
RUN echo "--- [PROD] Copying built backend artifacts ---"
COPY --from=backend-builder --chown=appuser:appgroup /app/backend/dist ./dist

# ... (rest of your production stage: frontend copy, data/logs dirs, USER, CMD, HEALTHCHECK) ...
# Create the target directory for the frontend build
RUN mkdir -p /app/dist/frontend_build && chown appuser:appgroup /app/dist/frontend_build

RUN echo "--- [PROD] Copying built frontend artifacts to /app/dist/frontend_build/ ---"
COPY --from=frontend-builder --chown=appuser:appgroup /app/frontend/dist/ ./dist/frontend_build/

RUN echo "--- [PROD] Creating data directory ---"
RUN mkdir -p /app/data && chown appuser:appgroup /app/data

RUN echo "--- [PROD] Creating log directory ---"
RUN mkdir -p /app/logs && chown appuser:appgroup /app/logs

USER appuser
EXPOSE 10000
CMD ["node", "dist/index.js"]

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:10000/api/health || exit 1

RUN echo "--- Dockerfile build definition complete ---"